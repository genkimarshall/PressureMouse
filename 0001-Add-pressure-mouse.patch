From 8f4a173bb80acd405234d772ef9bae7e986a59b5 Mon Sep 17 00:00:00 2001
From: Genki Marshall <genki@fastmail.com>
Date: Mon, 16 Jan 2023 21:21:34 -0800
Subject: [PATCH 1/2] Add pressure-mouse

---
 boards.txt                         |   4 +
 cores/teensy4/WProgram.h           |   1 +
 cores/teensy4/usb.c                |   4 +
 cores/teensy4/usb_desc.c           | 116 ++++++++++++++++++++++++++++-
 cores/teensy4/usb_desc.h           |  26 +++++++
 cores/teensy4/usb_inst.cpp         |   4 +
 cores/teensy4/usb_pressure_mouse.c |  71 ++++++++++++++++++
 cores/teensy4/usb_pressure_mouse.h |  51 +++++++++++++
 8 files changed, 276 insertions(+), 1 deletion(-)
 create mode 100644 cores/teensy4/usb_pressure_mouse.c
 create mode 100644 cores/teensy4/usb_pressure_mouse.h

diff --git a/boards.txt b/boards.txt
index 6f1c880..8aab5ea 100644
--- a/boards.txt
+++ b/boards.txt
@@ -526,6 +526,10 @@ teensy40.menu.usb.hid=Keyboard + Mouse + Joystick
 teensy40.menu.usb.hid.build.usbtype=USB_HID
 teensy40.menu.usb.hid.upload_port.usbtype=USB_HID
 teensy40.menu.usb.hid.fake_serial=teensy_gateway
+teensy40.menu.usb.pressuremouse=Pressure Mouse
+teensy40.menu.usb.pressuremouse.build.usbtype=USB_PRESSURE_MOUSE
+teensy40.menu.usb.pressuremouse.upload_port.usbtype=USB_PRESSURE_MOUSE
+teensy40.menu.usb.pressuremouse.fake_serial=teensy_gateway
 teensy40.menu.usb.serialhid=Serial + Keyboard + Mouse + Joystick
 teensy40.menu.usb.serialhid.build.usbtype=USB_SERIAL_HID
 teensy40.menu.usb.serialhid.upload_port.usbtype=USB_SERIAL_HID
diff --git a/cores/teensy4/WProgram.h b/cores/teensy4/WProgram.h
index df4dae1..92710df 100644
--- a/cores/teensy4/WProgram.h
+++ b/cores/teensy4/WProgram.h
@@ -52,6 +52,7 @@
 #include "usb_seremu.h"
 #include "usb_keyboard.h"
 #include "usb_mouse.h"
+#include "usb_pressure_mouse.h"
 #include "usb_joystick.h"
 #include "usb_midi.h"
 #include "usb_rawhid.h"
diff --git a/cores/teensy4/usb.c b/cores/teensy4/usb.c
index f7f3156..a39c756 100644
--- a/cores/teensy4/usb.c
+++ b/cores/teensy4/usb.c
@@ -6,6 +6,7 @@
 #include "usb_rawhid.h"
 #include "usb_keyboard.h"
 #include "usb_mouse.h"
+#include "usb_pressure_mouse.h"
 #include "usb_joystick.h"
 #include "usb_flightsim.h"
 #include "usb_touch.h"
@@ -466,6 +467,9 @@ static void endpoint0_setup(uint64_t setupdata)
 		#if defined(MOUSE_INTERFACE)
 		usb_mouse_configure();
 		#endif
+		#if defined(PRESSURE_MOUSE_INTERFACE)
+		usb_pressure_mouse_configure();
+		#endif
 		#if defined(FLIGHTSIM_INTERFACE)
 		usb_flightsim_configure();
 		#endif
diff --git a/cores/teensy4/usb_desc.c b/cores/teensy4/usb_desc.c
index bc6f7ef..f517e6b 100644
--- a/cores/teensy4/usb_desc.c
+++ b/cores/teensy4/usb_desc.c
@@ -278,6 +278,48 @@ static uint8_t mouse_report_desc[] = {
 };
 #endif
 
+#ifdef PRESSURE_MOUSE_INTERFACE
+static uint8_t pressure_mouse_report_desc[] = {
+        0x05, 0x0d,                     // USAGE_PAGE (Digitizers)
+        0x09, 0x02,                     // USAGE (Pen)
+        0xa1, 0x01,                     // COLLECTION (Application)
+        0x85, PRESSURE_MOUSE_REPORT_ID, //   HID_REPORTID
+        0x09, 0x20,                     //   USAGE (Stylus)
+        0xa1, 0x00,                     //   COLLECTION (Physical)
+        0x09, 0x42,                     //     USAGE (Tip Switch)
+        0x09, 0x32,                     //     USAGE (In Range)
+        0x15, 0x00,                     //     LOGICAL_MINIMUM
+        0x25, 0x01,                     //     LOGICAL_MAXIMUM
+        0x75, 0x01,                     //     REPORT_SIZE
+        0x95, 0x02,                     //     REPORT_COUNT
+        0x81, 0x02,                     //     INPUT (Data,Var,Abs)
+        0x95, 0x06,                     //     REPORT_COUNT
+        0x81, 0x03,                     //     INPUT (Cnst,Var,Abs)
+        0x05, 0x01,                     //     USAGE_PAGE (Generic Desktop)
+        0x75, 0x10,                     //     REPORT_SIZE
+        0x95, 0x01,                     //     REPORT_COUNT
+        0xa4,                           //     PUSH
+        0x55, 0x0d,                     //     UNIT_EXPONENT (-3)
+        0x65, 0x13,                     //     UNIT (Inch,EngLinear)
+        0x35, 0x00,                     //     PHYSICAL_MINIMUM
+        0x09, 0x30,                     //     USAGE (X)
+        0x46, 0x00, 0x20,               //     PHYSICAL_MAXIMUM
+        0x26, 0x00, 0x10,               //     LOGICAL_MAXIMUM
+        0x81, 0x02,                     //     INPUT (Data,Var,Abs)
+        0x09, 0x31,                     //     USAGE (Y)
+        0x46, 0x00, 0x18,               //     PHYSICAL_MAXIMUM
+        0x26, 0x00, 0x10,               //     LOGICAL_MAXIMUM
+        0x81, 0x02,                     //     INPUT (Data,Var,Abs)
+        0xb4,                           //     POP
+        0x05, 0x0d,                     //     USAGE_PAGE (Digitizers)
+        0x09, 0x30,                     //     USAGE (Tip Pressure)
+        0x26, 0xff, 0x03,               //     LOGICAL_MAXIMUM (analogRead() maximum)
+        0x81, 0x02,                     //     INPUT (Data,Var,Abs)
+        0xc0,                           //   END_COLLECTION
+        0xc0,                           // END_COLLECTION
+};
+#endif
+
 #ifdef JOYSTICK_INTERFACE
 #if JOYSTICK_SIZE == 12
 static uint8_t joystick_report_desc[] = {
@@ -571,7 +613,15 @@ static uint8_t flightsim_report_desc[] = {
 #define MOUSE_INTERFACE_DESC_SIZE	0
 #endif
 
-#define RAWHID_INTERFACE_DESC_POS	MOUSE_INTERFACE_DESC_POS+MOUSE_INTERFACE_DESC_SIZE
+#define PRESSURE_MOUSE_INTERFACE_DESC_POS	MOUSE_INTERFACE_DESC_POS+MOUSE_INTERFACE_DESC_SIZE
+#ifdef  PRESSURE_MOUSE_INTERFACE
+#define PRESSURE_MOUSE_INTERFACE_DESC_SIZE	9+9+7 // bLength of Interface + HID Interface + Endpoint Descriptors
+#define PRESSURE_MOUSE_HID_DESC_OFFSET		PRESSURE_MOUSE_INTERFACE_DESC_POS+9
+#else
+#define PRESSURE_MOUSE_INTERFACE_DESC_SIZE	0
+#endif
+
+#define RAWHID_INTERFACE_DESC_POS	PRESSURE_MOUSE_INTERFACE_DESC_POS+PRESSURE_MOUSE_INTERFACE_DESC_SIZE
 #ifdef  RAWHID_INTERFACE
 #define RAWHID_INTERFACE_DESC_SIZE	9+9+7+7
 #define RAWHID_HID_DESC_OFFSET		RAWHID_INTERFACE_DESC_POS+9
@@ -1180,6 +1230,36 @@ PROGMEM const uint8_t usb_config_descriptor_480[CONFIG_DESC_SIZE] = {
         MOUSE_INTERVAL,                         // bInterval
 #endif // MOUSE_INTERFACE
 
+#ifdef PRESSURE_MOUSE_INTERFACE
+        // configuration for 480 Mbit/sec speed
+        // Interface Descriptor, USB spec 9.6.5, page 267-269, Table 9-12
+        9,                                       // bLength
+        0x04,                                    // bDescriptorType (0x04 = Interface)
+        PRESSURE_MOUSE_INTERFACE,                // bInterfaceNumber
+        0,                                       // bAlternateSetting
+        1,                                       // bNumEndpoints
+        0x03,                                    // bInterfaceClass (0x03 = HID)
+        0x00,                                    // bInterfaceSubClass (0x00 = None)
+        0x00,                                    // bInterfaceProtocol (0x00 = None)
+        0,                                       // iInterface
+        // HID Interface Descriptor, HID 1.11 spec, section 6.2.1
+        9,                                       // bLength
+        0x21,                                    // bDescriptorType (0x21 = HID)
+        0x11, 0x01,                              // bcdHID v1.11
+        0x00,                                    // bCountryCode (0x00 = Not Localized)
+        1,                                       // bNumDescriptors
+        0x22,                                    // bDescriptorType (0x22 = Report)
+        LSB(sizeof(pressure_mouse_report_desc)), // wDescriptorLength
+        MSB(sizeof(pressure_mouse_report_desc)),
+        // Endpoint Descriptor, USB spec 9.6.6, page 269-271, Table 9-13
+        7,                                       // bLength
+        0x05,                                    // bDescriptorType (0x05 = Endpoint)
+        PRESSURE_MOUSE_ENDPOINT | 0x80,          // bEndpointAddress (0x80 = In Endpoint)
+        0x03,                                    // bmAttributes (0x03 = Interrupt)
+        PRESSURE_MOUSE_SIZE, 0,                  // wMaxPacketSize
+        PRESSURE_MOUSE_INTERVAL,                 // bInterval
+#endif // PRESSURE_MOUSE_INTERFACE
+
 #ifdef RAWHID_INTERFACE
 	// configuration for 480 Mbit/sec speed
         // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
@@ -2194,6 +2274,36 @@ PROGMEM const uint8_t usb_config_descriptor_12[CONFIG_DESC_SIZE] = {
         MOUSE_INTERVAL,                         // bInterval
 #endif // MOUSE_INTERFACE
 
+#ifdef PRESSURE_MOUSE_INTERFACE
+        // configuration for 12 Mbit/sec speed
+        // Interface Descriptor, USB spec 9.6.5, page 267-269, Table 9-12
+        9,                                       // bLength
+        0x04,                                    // bDescriptorType (0x04 = Interface)
+        PRESSURE_MOUSE_INTERFACE,                // bInterfaceNumber
+        0,                                       // bAlternateSetting
+        1,                                       // bNumEndpoints
+        0x03,                                    // bInterfaceClass (0x03 = HID)
+        0x00,                                    // bInterfaceSubClass (0x00 = None)
+        0x00,                                    // bInterfaceProtocol (0x00 = None)
+        0,                                       // iInterface
+        // HID Interface Descriptor, HID 1.11 spec, section 6.2.1
+        9,                                       // bLength
+        0x21,                                    // bDescriptorType (0x21 = HID)
+        0x11, 0x01,                              // bcdHID v1.11
+        0x00,                                    // bCountryCode (0x00 = Not Localized)
+        1,                                       // bNumDescriptors
+        0x22,                                    // bDescriptorType (0x22 = Report)
+        LSB(sizeof(pressure_mouse_report_desc)), // wDescriptorLength
+        MSB(sizeof(pressure_mouse_report_desc)),
+        // Endpoint Descriptor, USB spec 9.6.6, page 269-271, Table 9-13
+        7,                                       // bLength
+        0x05,                                    // bDescriptorType (0x05 = Endpoint)
+        PRESSURE_MOUSE_ENDPOINT | 0x80,          // bEndpointAddress (0x80 = In Endpoint)
+        0x03,                                    // bmAttributes (0x03 = Interrupt)
+        PRESSURE_MOUSE_SIZE, 0,                  // wMaxPacketSize
+        PRESSURE_MOUSE_INTERVAL,                 // bInterval
+#endif // PRESSURE_MOUSE_INTERFACE
+
 #ifdef RAWHID_INTERFACE
 	// configuration for 12 Mbit/sec speed
         // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
@@ -2781,6 +2891,10 @@ const usb_descriptor_list_t usb_descriptor_list[] = {
         {0x2200, MOUSE_INTERFACE, mouse_report_desc, sizeof(mouse_report_desc)},
         {0x2100, MOUSE_INTERFACE, usb_config_descriptor_480+MOUSE_HID_DESC_OFFSET, 9},
 #endif
+#ifdef PRESSURE_MOUSE_INTERFACE
+        {0x2200, PRESSURE_MOUSE_INTERFACE, pressure_mouse_report_desc, sizeof(pressure_mouse_report_desc)},
+        {0x2100, PRESSURE_MOUSE_INTERFACE, usb_config_descriptor_480+PRESSURE_MOUSE_HID_DESC_OFFSET, 9},
+#endif
 #ifdef JOYSTICK_INTERFACE
         {0x2200, JOYSTICK_INTERFACE, joystick_report_desc, sizeof(joystick_report_desc)},
         {0x2100, JOYSTICK_INTERFACE, usb_config_descriptor_480+JOYSTICK_HID_DESC_OFFSET, 9},
diff --git a/cores/teensy4/usb_desc.h b/cores/teensy4/usb_desc.h
index bb12796..9e2872b 100644
--- a/cores/teensy4/usb_desc.h
+++ b/cores/teensy4/usb_desc.h
@@ -277,6 +277,32 @@ let me know?  http://forum.pjrc.com/forums/4-Suggestions-amp-Bug-Reports
   #define ENDPOINT5_CONFIG	ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT
   #define ENDPOINT6_CONFIG	ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT
 
+#elif defined(USB_PRESSURE_MOUSE)
+  #define VENDOR_ID		0x16C0
+  #define PRODUCT_ID		0x04D4
+  #define MANUFACTURER_NAME	{'T','e','e','n','s','y','d','u','i','n','o'}
+  #define MANUFACTURER_NAME_LEN	11
+  #define PRODUCT_NAME		{'P','r','e','s','s','u','r','e',' ','M','o','u','s','e'}
+  #define PRODUCT_NAME_LEN	14
+  #define EP0_SIZE		64
+  #define NUM_ENDPOINTS		3
+  #define NUM_USB_BUFFERS	14
+  #define NUM_INTERFACE		2
+  #define SEREMU_INTERFACE	1
+  #define SEREMU_TX_ENDPOINT	2
+  #define SEREMU_TX_SIZE	64
+  #define SEREMU_TX_INTERVAL	1
+  #define SEREMU_RX_ENDPOINT	2
+  #define SEREMU_RX_SIZE	32
+  #define SEREMU_RX_INTERVAL	2
+  #define PRESSURE_MOUSE_INTERFACE	0
+  #define PRESSURE_MOUSE_ENDPOINT	3
+  #define PRESSURE_MOUSE_SIZE		8
+  #define PRESSURE_MOUSE_INTERVAL	1
+  #define PRESSURE_MOUSE_REPORT_ID	1
+  #define ENDPOINT2_CONFIG	ENDPOINT_RECEIVE_INTERRUPT + ENDPOINT_TRANSMIT_INTERRUPT
+  #define ENDPOINT3_CONFIG	ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT
+
 #elif defined(USB_SERIAL_HID)
   #define VENDOR_ID		0x16C0
   #define PRODUCT_ID		0x0487
diff --git a/cores/teensy4/usb_inst.cpp b/cores/teensy4/usb_inst.cpp
index ca623a1..8ab24b3 100644
--- a/cores/teensy4/usb_inst.cpp
+++ b/cores/teensy4/usb_inst.cpp
@@ -63,6 +63,10 @@ usb_keyboard_class Keyboard;
 usb_mouse_class Mouse;
 #endif
 
+#ifdef PRESSURE_MOUSE_INTERFACE
+usb_pressure_mouse_class PressureMouse;
+#endif
+
 #ifdef RAWHID_INTERFACE
 usb_rawhid_class RawHID;
 #endif
diff --git a/cores/teensy4/usb_pressure_mouse.c b/cores/teensy4/usb_pressure_mouse.c
new file mode 100644
index 0000000..c9d8f4a
--- /dev/null
+++ b/cores/teensy4/usb_pressure_mouse.c
@@ -0,0 +1,71 @@
+/* Pared-down version of usb_mouse.c. See its license. */
+
+#include "usb_dev.h"
+#include "usb_pressure_mouse.h"
+#include "core_pins.h" // yield()
+#include <string.h> // memcpy()
+#include "avr/pgmspace.h" // DMAMEM
+#include "debug/printf.h"
+#include "core_pins.h"
+
+#ifdef PRESSURE_MOUSE_INTERFACE
+
+#define TX_NUM 4
+#define TX_BUFSIZE 32
+static transfer_t tx_transfer[TX_NUM] __attribute__ ((used, aligned(32)));
+DMAMEM static uint8_t txbuffer[TX_NUM * TX_BUFSIZE] __attribute__ ((aligned(32)));
+static uint8_t tx_head = 0;
+#if PRESSURE_MOUSE_SIZE > TX_BUFSIZE
+#error "Internal error, transmit buffer size is too small for pressure-mouse endpoint"
+#endif
+
+void usb_pressure_mouse_configure(void)
+{
+        memset(tx_transfer, 0, sizeof(tx_transfer));
+        tx_head = 0;
+        usb_config_tx(PRESSURE_MOUSE_ENDPOINT, PRESSURE_MOUSE_SIZE, 0, NULL);
+}
+
+// When the PC isn't listening, how long do we wait before discarding data?
+#define TX_TIMEOUT_MSEC 30
+
+int usb_pressure_mouse_transmit(const uint8_t *data, uint32_t len)
+{
+        static uint8_t transmit_previous_timeout = 0;
+        if (!usb_configuration) {
+                return -1;
+        }
+        uint32_t head = tx_head;
+        transfer_t *xfer = tx_transfer + head;
+        uint32_t wait_begin_at = systick_millis_count;
+        while (1) {
+                uint32_t status = usb_transfer_status(xfer);
+                if (!(status & 0x80)) {
+                        if (status & 0x68) {
+                                // TODO: what if status has errors???
+                                printf("ERROR status = %x, i=%d, ms=%u\n", status, tx_head, systick_millis_count);
+                        }
+                        transmit_previous_timeout = 0;
+                        break;
+                }
+                if (transmit_previous_timeout) return -1;
+                if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
+                        // waited too long, assume the USB host isn't listening
+                        transmit_previous_timeout = 1;
+                        return -1;
+                }
+                if (!usb_configuration) return -1;
+                yield();
+        }
+        delayNanoseconds(30); // TODO: why is status ready too soon?
+        uint8_t *buffer = txbuffer + head * TX_BUFSIZE;
+        memcpy(buffer, data, len);
+        usb_prepare_transfer(xfer, buffer, len, 0);
+        arm_dcache_flush_delete(buffer, TX_BUFSIZE);
+        usb_transmit(PRESSURE_MOUSE_ENDPOINT, xfer);
+        if (++head >= TX_NUM) head = 0;
+        tx_head = head;
+        return 0;
+}
+
+#endif // PRESSURE_MOUSE_INTERFACE
diff --git a/cores/teensy4/usb_pressure_mouse.h b/cores/teensy4/usb_pressure_mouse.h
new file mode 100644
index 0000000..5d810b3
--- /dev/null
+++ b/cores/teensy4/usb_pressure_mouse.h
@@ -0,0 +1,51 @@
+/* Template copied from usb_mouse.h, under its license. */
+
+#ifndef USBpressuremouse_h_
+#define USBpressuremouse_h_
+
+#include "usb_desc.h"
+
+#if defined(PRESSURE_MOUSE_INTERFACE)
+
+#include <inttypes.h>
+
+// C language implementation
+#ifdef __cplusplus
+extern "C" {
+#endif
+void usb_pressure_mouse_configure(void);
+int usb_pressure_mouse_transmit(const uint8_t *data, uint32_t len);
+extern volatile uint8_t usb_configuration;
+#ifdef __cplusplus
+}
+#endif
+
+// C++ interface
+#ifdef __cplusplus
+class usb_pressure_mouse_class
+{
+        public:
+        int transmit(int16_t dx, int16_t dy, uint16_t pressure) {
+                static uint16_t x = 0x400;
+                static uint16_t y = 0x400;
+                x = static_cast<int16_t>(x) + dx;
+                y = static_cast<int16_t>(y) + dy;
+                uint8_t buf[8];
+                buf[0] = PRESSURE_MOUSE_REPORT_ID;
+                buf[1] = 0b10 | (pressure > 0);
+                buf[2] = x & 0xff;
+                buf[3] = x >> 8;
+                buf[4] = y & 0xff;
+                buf[5] = y >> 8;
+                buf[6] = pressure & 0xff;
+                buf[7] = pressure >> 8;
+                return usb_pressure_mouse_transmit(buf, sizeof(buf));
+        }
+};
+extern usb_pressure_mouse_class PressureMouse;
+
+#endif // __cplusplus
+
+#endif // PRESSURE_MOUSE_INTERFACE
+
+#endif // USBpressuremouse_h_
-- 
2.37.1 (Apple Git-137.1)

